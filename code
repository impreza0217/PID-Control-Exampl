```python
import time

# PID 控制器類
class PID:
    def __init__(self, Kp, Ki, Kd):
        self.Kp = Kp    # 比例增益
        self.Ki = Ki    # 積分增益
        self.Kd = Kd    # 微分增益
        self.previous_error = 0  # 上次誤差
        self.integral = 0  # 積分項的累積誤差

    def compute(self, setpoint, measured_value):
        error = setpoint - measured_value  # 計算誤差
        self.integral += error  # 累積誤差（積分項）
        derivative = error - self.previous_error  # 計算誤差變化率（微分項）

        # PID 控制公式
        output = self.Kp * error + self.Ki * self.integral + self.Kd * derivative

        # 更新前次誤差
        self.previous_error = error

        return output

# 主程式
if __name__ == "__main__":
    setpoint = 50  # 設定目標值
    pid = PID(Kp=1.2, Ki=1.0, Kd=0.01)  # 初始化 PID 控制器
    process = Process()  # 初始化系統
    time_step = 0.1  # 控制周期（秒）

    # 模擬運行
    for _ in range(100):
        measured_value = process.value  # 取得當前系統輸出
        control_signal = pid.compute(setpoint, measured_value)  # 計算控制信號
        process.update(control_signal)  # 更新系統狀態
        print(f"Setpoint: {setpoint}, Measured: {measured_value:.2f}, Control: {control_signal:.2f}")
        time.sleep(time_step)  # 延遲一段時間模擬實時控制
