import numpy as np
import matplotlib.pyplot as plt

# PID控制器類別
class AdaptivePID:
    def __init__(self, Kp, Ki, Kd, setpoint, initial_temperature):
        self.Kp = Kp
        self.Ki = Ki
        self.Kd = Kd
        self.setpoint = setpoint
        self.previous_error = 0
        self.integral = 0
        self.previous_temperature = initial_temperature

    def update(self, current_temperature):
        error = self.setpoint - current_temperature  # 當前誤差
        self.integral += error  # 積分
        derivative = current_temperature - self.previous_temperature  # 微分

        # 計算PID輸出
        output = self.Kp * error + self.Ki * self.integral + self.Kd * derivative
        
        # 更新前一次誤差和溫度
        self.previous_error = error
        self.previous_temperature = current_temperature
        
        return output, error

    def adapt(self, error, control_effort):
        """根據誤差和控制努力調整PID參數"""
        # 簡單的自適應規則（可以根據需求調整）
        if error > 5.0:  # 如果誤差較大，增加Kp
            self.Kp *= 1.05
        if control_effort > 120:  # 如果控制努力過大，稍微減少Ki
            self.Ki *= 0.95
        if abs(error) < 1.0:  # 如果誤差較小，增加Kd以獲得更精細的控制
            self.Kd *= 1.05

# 仿真參數
setpoint = 120.0  # 期望溫度
initial_temperature = 100.0  # 初始溫度
time_steps = 10000  # 仿真時間步數
dt = 1  # 時間步長（1秒）

# 創建PID控制器
pid = AdaptivePID(Kp=4.126, Ki=0.375, Kd=0.915, setpoint=setpoint, initial_temperature=initial_temperature)

# 仿真數據陣列
temperature = [initial_temperature]
control_effort = []
errors = []

# 仿真循環
for t in range(time_steps):
    current_temperature = temperature[-1]  # 當前溫度

    # 更新PID控制器
    effort, error = pid.update(current_temperature)
    
    # 簡化的系統模型：根據控制努力調整溫度
    current_temperature += effort * dt / 100  # 控制努力對溫度的影響
    
    # 存儲數據
    temperature.append(current_temperature)
    control_effort.append(effort)
    errors.append(error)

    # 基於誤差和控制努力調整PID參數
    pid.adapt(error, effort)

    # 如果溫度已經接近設定值且誤差小於0.5，則提前停止仿真
    if abs(error) < 0.5 and len(temperature) > 500:  # 設定簡單的停止條件
        break

# 仿真結果
final_temperature = temperature[-1]
final_error = abs(setpoint - final_temperature)
settling_time = next((i for i, temp in enumerate(temperature) if abs(temp - setpoint) < 0.5), time_steps)
max_overshoot = max(temperature) - setpoint

# 輸出結果
print(f"最終溫度: {final_temperature:.2f}°C")
print(f"最終誤差: {final_error:.2f}°C")
print(f"穩定時間（±0.5°C）: {settling_time}s")
print(f"最大過衝: {max_overshoot:.2f}°C")
print(f"最終PID參數: Kp = {pid.Kp:.3f}, Ki = {pid.Ki:.3f}, Kd = {pid.Kd:.3f}")

# 繪製溫度隨時間變化的曲線
plt.plot(temperature)
plt.axhline(setpoint, color='r', linestyle='--', label='設定點')
plt.title("溫度隨時間變化")
plt.xlabel("時間 (秒)")
plt.ylabel("溫度 (°C)")
plt.legend()
plt.show()
